// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/ShooterCmd.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shooterMotor = RobotMap::shooterShooterMotor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Speed closed-loop, Set() controls set point
    shooterMotor->SetControlMode(CANSpeedController::kSpeed);
    // Quadrature EncoderCPR=1024
    shooterMotor->SetFeedbackDevice(CANTalon::QuadEncoder);
    shooterMotor->ConfigEncoderCodesPerRev(1024);
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ShooterCmd());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::SetSpeed(int speed) {
	double p = 0.3;			/*Kp */
	double i = 0.003;		/*Ki */
	double d = 3;			/*Kd */
	double f = 0.0003;		/*Kf */
	int izone = 300;		/* encoder ticks/ analog units */
	double ramprate = 48;	/* volts per second, =>0% to 100% in 250ms */
	int profile = 1;		/* can be 0 or 1 */

	shooterMotor->SelectProfileSlot(profile);
	shooterMotor->SetPID(p, i, d, f);
	shooterMotor->SetIzone(izone);
	shooterMotor->SetCloseLoopRampRate(ramprate);

	shooterMotor->Set(speed);

}
