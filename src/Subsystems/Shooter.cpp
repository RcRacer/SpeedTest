// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/ShooterCmd.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    shooterMotorL = RobotMap::shooterShooterMotorL;
    shooterMotorR = RobotMap::shooterShooterMotorR;
    highSolenoid = RobotMap::shooterhighSolenoid;
    highCompressor = RobotMap::shooterhighCompressor;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //Speed closed-loop, Set() controls set point
    shooterMotorL->SetControlMode(CANSpeedController::kSpeed);
    shooterMotorR->SetControlMode(CANSpeedController::kFollower);
    shooterMotorR->Set(5);
    //shooterMotorR->SetClosedLoopOutputDirection(true);
    // Quadrature EncoderCPR=1024
    shooterMotorL->SetFeedbackDevice(CANTalon::QuadEncoder);
    shooterMotorL->ConfigEncoderCodesPerRev(1024);
    shooterMotorL->SetSensorDirection(true);

    shooterMotorR->SetFeedbackDevice(CANTalon::QuadEncoder);
    shooterMotorR->ConfigEncoderCodesPerRev(1024);
    shooterMotorR->SetSensorDirection(true);
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new ShooterCmd());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Shooter::SetSpeed(int speed) {
	double p = 0.3;			/*Kp 0.03 */
	double i = 0.03;		/*Ki 0.003 */
	double d = 3;			/*Kd 3 */
	double f = 0.0003;		/*Kf 0.0003 */
	int izone = 300;		/* encoder ticks/ analog units 300 */
	double ramprate = 12;	/* volts per second, =>0% to 100% in 250ms, 48 */
	int profile = 1;		/* can be 0 or 1 */

	shooterMotorL->SelectProfileSlot(profile);
	shooterMotorL->SetPID(p, i, d, f);
	shooterMotorL->SetIzone(izone);
	shooterMotorL->SetCloseLoopRampRate(ramprate);

	shooterMotorL->Set(speed);
/*
	shooterMotorR->SelectProfileSlot(profile);
	shooterMotorR->SetPID(p, i, d, f);
	shooterMotorR->SetIzone(izone);
	shooterMotorR->SetCloseLoopRampRate(ramprate);

	shooterMotorR->Set(speed);
*/
}

void Shooter::PrintValues() {
	printf("Left Current Amps: %f\n",shooterMotorL->GetOutputCurrent());
	printf("Left Output: %f\n",shooterMotorL->GetOutputVoltage());
	printf("Left busV: %f\n\n",shooterMotorL->GetBusVoltage());

	printf("Left quadEncoder velocity: %i\n",shooterMotorL->GetEncVel());
	printf("Left selected sensor speed: %i\n\n",shooterMotorL->GetSpeed());

	printf("Right Current Amps: %f\n",shooterMotorR->GetOutputCurrent());
	printf("Right Output: %f\n",shooterMotorR->GetOutputVoltage());
	printf("Right busV: %f\n\n",shooterMotorR->GetBusVoltage());

	printf("Right quadEncoder velocity: %i\n",shooterMotorR->GetEncVel());
	printf("Right selected sensor speed: %i\n\n",shooterMotorR->GetSpeed());

}

void Shooter::SetSolen(bool value) {
	highSolenoid->Set(value);
}

int Shooter::GetMotorVel(){
	return shooterMotorL->GetEncVel();
}

std::shared_ptr<Solenoid> Shooter::GetHighSolenoid(){
	return highSolenoid;
}
