// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShooterCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShooterCmd::ShooterCmd(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShooterCmd::Initialize() {

}

// Called repeatedly when this Command is scheduled to run
void ShooterCmd::Execute() {

	Robot::shooter->PrintValues();

	//High Goal - Button X
	if(Robot::oi->getGamePad()->GetRawButton(1)){
		Robot::shooter->SetSpeed(375);   //375
		/*do{
			Robot::shooter->PrintValues();
			Wait(.1);
		}while (Robot::shooter->GetMotorVel()<450);
		*/
		Wait(1.25);  //1.25
		Robot::shooter->PrintValues();
		Robot::shooter->SetSolen(true);
		Wait(.5);
		Robot::shooter->PrintValues();
		Robot::shooter->SetSolen(false);
		Robot::shooter->PrintValues();
		Robot::shooter->SetSpeed(0);

	}
	//Solenoid - Button A
	if(Robot::oi->getGamePad()->GetRawButton(2) && !Robot::shooter->GetHighSolenoid()->Get())
	{
		Wait(.5);
		Robot::shooter->SetSolen(true);
	}
	else if (Robot::oi->getGamePad()->GetRawButton(2) && Robot::shooter->GetHighSolenoid()->Get())
	{
		Wait(.5);
		Robot::shooter->SetSolen(false);
	}



	//LowGoal - Button Y
	if (Robot::oi->getGamePad()->GetRawButton(4)) {
		Robot::shooter->SetSpeed(244);   //244
		/*do{
			Robot::shooter->PrintValues();
			Wait(.1);
		}while (Robot::shooter->GetMotorVel()<450);
		 */
		Wait(1);    //1
		Robot::shooter->PrintValues();
		Robot::shooter->SetSolen(true);
		Wait(.5);
		Robot::shooter->PrintValues();
		Robot::shooter->SetSolen(false);
		Robot::shooter->PrintValues();
		Robot::shooter->SetSpeed(0);
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ShooterCmd::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void ShooterCmd::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterCmd::Interrupted() {

}
